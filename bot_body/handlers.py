import sqlite3, aiohttp, asyncio, logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command

from standart_run import bot
from decouple import config
import requests

user_router = Router()

@user_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –Ω–∞ —Å–∞–π—Ç–µ ToDo-List\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É - </check>')

def get_overdue_tasks():
    try:
        response = requests.get(config('API_URL'))
        if response.status_code == 200:
            return response.json()
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return []

@user_router.message(Command("check"))
async def cmd_ckeck_tasks(message: Message):
    chat_id = message.chat.id
    tasks = get_overdue_tasks()
    if tasks:
        message = "üîî –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        for task in tasks:
            message += f"‚Ä¢ {task['title']} (–¥–æ {task['deadline']})\n"
    else:
        message = "‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"

    await bot.send_message(chat_id=chat_id, text=message)