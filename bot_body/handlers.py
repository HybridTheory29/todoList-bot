import sqlite3, aiohttp, asyncio, logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command

from django.conf import settings
import requests

user_router = Router()

@user_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –Ω–∞ —Å–∞–π—Ç–µ ToDo-List')
    

async def check_tasks():
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('http://yourdjango.com/api/get_overdue_tasks/') as resp:
                    data = await resp.json()
                    for telegram_id, user_data in data.items():
                        for task in user_data['tasks']:
                            message = (
                                f"üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞!\n"
                                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n"
                                f"–î–µ–¥–ª–∞–π–Ω: {task['due_date']}"
                            )
                            await bot.send_message(
                                chat_id=user_data['chat_id'],
                                text=message
                            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á: {e}")
        
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å